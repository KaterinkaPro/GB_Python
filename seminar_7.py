# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине программы используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.

# transformation = lambda x:x

# values = [1, 23, 42, "asdfg"]
# transformed_values = list(map(lambda x:x, values))
# if values == transformed_values:
#     print("ok")
# else:
#     print("fail")


# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая # планета. 
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты.
#  Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел 
# - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь.
# Гарантируется, что самая далекая планета ровно одна

# import math 

# def find_farthest_orbit(list_of_orbits):
#     # list_of_sq = []
#     # for i in list_of_orbits:
#     #     if i[0] != i[1]:
#     #         list_of_sq.append( math.pi * i[0]*i[1]) 
#     # return list_of_orbits[list_of_sq.index(max(list_of_sq))]
#     return max([(i[0]*i[1]*math.pi,i) for i in list_of_orbits if i[0]!=i[1]])[1]
    # return max(orbits, key = lambda x: x[0]*x[1] if x[0] != x[1] else -1)




# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(find_farthest_orbit(orbits))



# Напишите функцию same_by(characteristic, objects), которая проверяет, все ли объекты имеют одинаковое значение некоторой характеристики, и возвращают True, если это так. 
# Если значение характеристики для разных объектов отличается - то False. Для пустого набора объектов, функция должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его характеристику.

# def same_by(condition, nums):
#     return len(list(condition, nums))) == 0

# values = [0, 2, 10, 6] 
# if same_by(lambda x: x % 2, values):
#     print(‘same’)
# else:
#     print(‘different’)
      
# def same_by(characteristic, objects):
#     count = 0
#     for i in objects:
#         if i % 2 != 0:
#             count +=1
#     return count == 0

# доп задача
# a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for indx,val in enumerate(a):
#     val[indx] = 0
#     print(indx,val)


# 43)Имеется список id сотрудников из 10 элементов, каждый id - случайное число от 1 до 100 (сделать с помощью list_comprehension)
# Имеется список имен сотрудников из 10 элементов (вручную)
# Сопоставьте каждому имени сотрудника его id по порядку, и выведите получившийся список кортежей.
# Отсортировать список по возрастанию id.
# Выведете имена сотрудников, получившие нечетное id.

# id = [i for i in range(1, 101)]
# name = ['Vasy', 'Petr', 'Vova', 'Dima', 'Masha', 'Dasha', 'Ivan', 'Vika', 'Max', 'Lika']
# lst = list(zip(id,name))
# lst.sort( key=lambda x: (x[1]))
# spisok = list(filter(lambda x: x[0] % 2 != 0 , lst))
# print(spisok)



